#.Parameter LocalUserName
#    Name of the local user account on the computer where this script is run
#    whose password should be reset to a 15-25 character, complex, random password.
#    Do not include a "\" or "@" character, only local accounts are supported.
#    Defaults to "mn0adm1", but any name can be specified.
#
#.Parameter MinimumPasswordLength
#    The minimum length of the random password.  Default is 15.  The exact length
#    used is randomly chosen to increase the workload of an attacker who can see
#    the contents of this script.  Maximum password length defaults to 20.  The
#    smallest acceptable minimum length is 4 due to complexity requirements.
#
#.Parameter MaximumPasswordLength
#    The maximum length of the random password.  Default is 20.  Max is 127.
#    The minimum and maximum values can be identical.    
#
####################################################################################

Param ($LocalUserName = "Administrator", [int]$MinimumPasswordLength = 15, [int]$MaximumPasswordLength = 20)

####################################################################################
# Function Name: Generate-RandomPassword
#   Argument(s): Integer for the desired length of password.
#       Returns: Pseudo-random complex password that has at least one of each of the 
#                following character types: uppercase letter, lowercase letter, 
#                number, and legal non-alphanumeric for a Windows password.
#         Notes: If the argument/password is less than 4 characters long, the 
#                function will return a 4-character password anyway.  Otherwise, the
#                complexity requirements won't be satisfiable.  Integers are 
#                generated, converted to Unicode code points (chars), and then
#                encoded as a UTF16LE string so that the function can be easily 
#                modified by users who are not using en-US keyboards.  For the
#                sake of script compatibility, various characters are excluded
#                even though this reduces randomness.  
####################################################################################
function Generate-RandomPassword ($length = 15) {
    If ($length -lt 4) { $length = 4 }   #Password must be at least 4 characters long in order to satisfy complexity requirements.

    #Use the .NET crypto random number generator, not the weaker System.Random class with Get-Random:
    $RngProv = [System.Security.Cryptography.RNGCryptoServiceProvider]::Create()
    [byte[]] $onebyte = @(255)
    [Int32] $x = 0

    Do {
        [byte[]] $password = @() 
        
        $hasupper = $false    #Has uppercase letter character flag.
        $haslower = $false    #Has lowercase letter character flag.
        $hasnumber = $false    #Has number character flag.
        $hasnonalpha = $false    #Has non-alphanumeric character flag.
        $isstrong = $false    #Assume password is not complex until tested otherwise.
        
        For ($i = $length; $i -gt 0; $i--) {                                                         
            While ($true) {   
                #Generate a random US-ASCII code point number.
                $RngProv.GetNonZeroBytes( $onebyte ) 
                [Int32] $x = $onebyte[0]                  
                if ($x -ge 32 -and $x -le 126) { break }   
            }
            
            # Even though it reduces randomness, eliminate problem characters to preserve sanity while debugging.
            # If you're worried, increase the length of the password or comment out the undesired line(s):
            If ($x -eq 32) { $x++ }    #Eliminates the space character; causes problems for other scripts/tools.
            If ($x -eq 34) { $x-- }    #Eliminates double-quote; causes problems for other scripts/tools.
            If ($x -eq 39) { $x-- }    #Eliminates single-quote; causes problems for other scripts/tools.
            If ($x -eq 47) { $x-- }    #Eliminates the forward slash; causes problems for net.exe.
            If ($x -eq 96) { $x-- }    #Eliminates the backtick; causes problems for PowerShell.
            If ($x -eq 48) { $x++ }    #Eliminates zero; causes problems for humans who see capital O.
            If ($x -eq 79) { $x++ }    #Eliminates capital O; causes problems for humans who see zero. 
            
            $password += [System.BitConverter]::GetBytes( [System.Char] $x ) 

            If ($x -ge 65 -And $x -le 90) { $hasupper = $true }   #Non-USA users may wish to customize the code point numbers by hand,
            If ($x -ge 97 -And $x -le 122) { $haslower = $true }   #which is why we don't use functions like IsLower() or IsUpper() here.
            If ($x -ge 48 -And $x -le 57) { $hasnumber = $true } 
            If (($x -ge 32 -And $x -le 47) -Or ($x -ge 58 -And $x -le 64) -Or ($x -ge 91 -And $x -le 96) -Or ($x -ge 123 -And $x -le 126)) { $hasnonalpha = $true } 
            If ($hasupper -And $haslower -And $hasnumber -And $hasnonalpha) { $isstrong = $true } 
        } 
    } While ($isstrong -eq $false)

    #$RngProv.Dispose() #Not compatible with PowerShell 2.0.

    ([System.Text.Encoding]::Unicode).GetString($password) #Make sure output is encoded as UTF16LE. 
}


########################################################################################
# Function Name: Reset-LocalUserPassword
#   Argument(s): Username to change password of, and Password to set it to
#       Returns: True upon success and false on failure
#         Notes: Returns true if password reset accepted, false if there is an error.
#                Only works on local computer, but can be modified to work remotely too.
########################################################################################
Function Reset-LocalUserPassword ($UserName, $NewPassword) {
    Try {
        $ADSI = [ADSI]("WinNT://" + $env:ComputerName + ",computer")
        $User = $ADSI.PSbase.Children.Find($UserName)
        $User.PSbase.Invoke("SetPassword", $NewPassword)
        $User.PSbase.CommitChanges()
        $User = $null 
        $ADSI = $null
        $True
    }
    Catch
    { $False } 
}

########################################################################################
# Function Name: Write-StatusLog
#   Argument(s): Message to include in log, exit switch denotes Failure
#       Returns: Writes line to Application Log
#         Notes: Writes to console, writes to Application event log, optionally exits.
#                Event log: Application, Source: "FLAPS", Event ID: 903 on Success
#                Event log: Application, Source: "FLAPS", Event ID: 904 on Failure
########################################################################################

function Write-StatusLog ( $Message, [Switch] $Exit ) {
    # Define the Source attribute for when this script writes to the Application event log.
    New-EventLog -LogName Application -Source FLAPS -ErrorAction SilentlyContinue

    "`n" + $Message + "`n"

    if ($Exit)
    { write-eventlog -logname Application -source FLAPS -eventID 904 -message $Message -EntryType Error }
    else
    { write-eventlog -logname Application -source FLAPS -eventID 903 -message $Message -EntryType Information }

    if ($Exit) { exit } 
}



# Sanity check the two password lengths:
if ($MinimumPasswordLength -le 14) { $MinimumPasswordLength = 15 } 
if ($MaximumPasswordLength -gt 20) { $MaximumPasswordLength = 20 } 
if ($MinimumPasswordLength -gt 20) { $MinimumPasswordLength = 20 } 
if ($MaximumPasswordLength -lt $MinimumPasswordLength) { $MaximumPasswordLength = $MinimumPasswordLength }


# Confirm that this process has administrative privileges to reset a local password.
$CurrentWindowsID = [System.Security.Principal.WindowsIdentity]::GetCurrent()
$CurrentPrincipal = new-object System.Security.Principal.WindowsPrincipal($CurrentWindowsID)

if (-not $? -or -not $CurrentPrincipal.IsInRole(([System.Security.Principal.SecurityIdentifier]("S-1-5-32-544")).Translate([System.Security.Principal.NTAccount]).Value))
{ write-statuslog -m "ERROR: This process lacks the privileges necessary to reset a password." -exit }


# Confirm that the target local account exists and that ADSI is accessible.
if ($LocalUserName -match '[\\@]') { write-statuslog -m "ERROR: This script can only be used to reset the passwords of LOCAL user accounts, please specify a simple username without an '@' or '\' character in it." -exit }  
try { 
    $ADSI = [ADSI]("WinNT://" + $env:ComputerName + ",computer") 
    $User = $ADSI.PSbase.Children.Find($LocalUserName)
    $User = $null
    $ADSI = $null 
}
catch 
{ write-statuslog -m "ERROR: Local user does not exist: $LocalUserName" -exit } 

$NewPassword = "ConfirmThatNewPasswordIsRandom"

if ($MinimumPasswordLength -eq $MaximumPasswordLength) {  
    $NewPassword = Generate-RandomPassword -Length $MaximumPasswordLength
} 
else { 
    $NewPassword = Generate-RandomPassword -Length $(Get-Random -Minimum $MinimumPasswordLength -Maximum $MaximumPasswordLength) 
}

if ($NewPassword -eq "ConfirmThatNewPasswordIsRandom") 
{ write-statuslog -m "ERROR: Password generation failure, password not reset." -exit } 

    # Attempt to reset the password.
    if ( Reset-LocalUserPassword -UserName $LocalUserName -NewPassword $newpassword ) {   
        $newpassword = $null #Remove Password Variable, tidying up.
        Remove-Variable -name newpassword  
        write-statuslog -m "SUCCESS: Local admin password reset."  
    }
    else {
        $newpassword = $null #Remove Password value from variable, tidying up.
        Remove-Variable -name newpassword 
        write-statuslog -m "ERROR: Failed to reset password" -exit 
}
